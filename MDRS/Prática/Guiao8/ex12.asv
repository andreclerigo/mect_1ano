% Exercicio 12

%% ex12.a)
clear all
close all
clc

load('InputData2.mat')
nNodes= size(Nodes,1);
nFlows= size(T,1);
anycastNodes = [3 5];
sourceNodes = setdiff(1:nNodes, anycastNodes);

v = 2*10^5;             % v = 2x10^5 km/sec
D = L/v;                % Propagation Delay matrix

dwThroughput = [0.7 1.5 2.1 1.0 1.3 2.7 2.2 0.8 1.7 1.9 2.8;
                0.1 0.2 0.3 0.1 0.1 0.4 0.3 0.1 0.2 0.3 0.4];
dwThroughput = dwThroughput';

% Computing up to k=inf shortest paths for all flows from 1 to nFlows:
k= 1;
sP= cell(1, nNodes);
costs = zeros(1, nNodes);
for n = 1:nNodes
    best = inf;
    if ismember(n, anycastNodes)
        costs(n) = 0;
        continue;
    end

    for a = 1:length(anycastNodes)
        [shortestPath, totalCost] = kShortestPath(D, n, anycastNodes(a), 1);

        if totalCost < best
            sP{n}= shortestPath;
            best = totalCost;
            costs(n) = totalCost;
        end
    end
end

fprintf("Anycast Nodes = %s\n", num2str(anycastNodes));
[worstCost, worstNode] = max(costs);
fprintf("Node with the worst round-trip delay: %d\n", worstNode);
fprintf("W = %.2f ms A = %.2f ms\n\n", worstCost * 2 * 1000, mean(costs) * 2 * 1000);

% ex12.b)
% Construcint the matrix T
T = zeros(length(sourceNodes), 4);
idx = 1;
% srcNode anyNode upSrc dwSrc
for p = sP
    if isempty(p{1})
        continue;
    end

    srcN = p{1}{1}(1);
    dstN = p{1}{1}(end);
    T(idx, 1) = srcN;
    T(idx, 2) = dstN;
    T(idx, 3) = dwThroughput(srcN, 2);
    T(idx, 4) = dwThroughput(srcN, 1);

    idx = idx + 1;
end

sol = ones(1, nNodes);
sol(3) = 0;
sol(5) = 0;
sP = sP(~cellfun(@isempty, sP));    % remove empty entry from the cell array

Loads = calculateLinkLoads(nNodes, Links, T, sP, sol);
fprintf("Anycast Nodes = %s\n", num2str(anycastNodes));
% Determine the worst link load:
maxLoad= max(max(Loads(:,3:4)));
fprintf('Worst link load = %.1f Gbps\n', maxLoad);

for i = 1 : length(Loads)
    fprintf('{%d - %d}:\t%.2f\t%.2f\n', Loads(i), Loads(i+length(Loads)), Loads(i+length(Loads)*2), Loads(i+length(Loads)*3))
end

%% ex12.c)
clear all
close all
clc

load('InputData2.mat')
nNodes= size(Nodes,1);
nFlows= size(T,1);
v = 2*10^5;             % v = 2x10^5 km/sec
D = L/v;                % Propagation Delay matrix
dwThroughput = [0.7 1.5 2.1 1.0 1.3 2.7 2.2 0.8 1.7 1.9 2.8;
                0.1 0.2 0.3 0.1 0.1 0.4 0.3 0.1 0.2 0.3 0.4];
dwThroughput = dwThroughput';


anycastNodes = [3 5];
sourceNodes = setdiff(1:nNodes, anycastNodes);

% Computing up to k=inf shortest paths for all flows from 1 to nFlows:
k= 1;
sP= cell(1, nNodes);
costs = zeros(1, nNodes);
for n = 1:nNodes
    best = inf;
    if ismember(n, anycastNodes)
        costs(n) = 0;
        continue;
    end

    for a = 1:length(anycastNodes)
        [shortestPath, totalCost] = kShortestPath(D, n, anycastNodes(a), 1);

        if totalCost < best
            sP{n}= shortestPath;
            best = totalCost;
            costs(n) = totalCost;
        end
    end
end
[worstCost, worstNode] = max(costs);

fprintf("Anycast Nodes = %s\n", num2str(anycastNodes));